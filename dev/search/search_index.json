{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to asgi-matomo","text":"<p><code>asgi-matomo</code> is a library for tracking requests to your ASGI-app  with Matomo.</p>"},{"location":"usage/","title":"Getting started","text":""},{"location":"usage/#installation","title":"Installation","text":"<p>To install <code>asgi-matomo</code>:</p> <pre><code>pip install asgi-matomo\n</code></pre>"},{"location":"usage/#usage","title":"Usage","text":"<p>To use the <code>MatomoMiddleware</code> with, for instance Starlette, simply:</p> <pre><code>from asgi_matomo import MatomoMiddleware\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\n\n\nasync def homepage(request):\n    return JSONResponse({\"data\": 4000})\n\n\napp = Starlette(\n    routes=[Route(\"/\", homepage)],\n    middleware=[\n        Middleware(\n            MatomoMiddleware,\n            matomo_url=\"YOUR MATOMO TRACKING URL\",\n            idsite=12345,  # your service tracking id\n        )\n    ],\n)\n</code></pre> <p>This will track all requests made to your service.</p>"},{"location":"usage/#what-is-tracked","title":"What is tracked?","text":"<p>Currently <code>asgi-matomo</code> tracks the following variables:</p> <ul> <li><code>action_name</code> that defaults to the path</li> <li><code>url</code> of the request</li> <li><code>ua</code>: user-agent of the client</li> <li><code>gt_ms</code>: measured as the time before and after this middleware call next in the asgi stack.</li> <li><code>cvar</code> with at least <code>http_status_code</code> and <code>http_method</code> set.</li> <li><code>lang</code>: if the header <code>accept-lang</code> is set</li> <li><code>cip</code>: client ip, this is only tracked if <code>access_token</code> is given</li> <li><code>sendimage=0</code> for performance issues</li> </ul> <p>Please refer to Matomo Tracking HTTP API for available variables.</p>"},{"location":"usage/details/","title":"Configuring tracked details","text":"<p>Sometimes we want to change something that is tracked, it can either be about a route or about a specific request.</p>"},{"location":"usage/details/#configuring-a-route","title":"Configuring a route","text":"<p>We can configure a route by giving the middleware a dict with details.</p> <pre><code>from asgi_matomo import MatomoMiddleware\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\n\n\nasync def foo(request):\n    return JSONResponse({\"name\": \"foo\"})\n\n\napp = Starlette(\n    routes=[Route(\"/foo\", foo)],\n    middleware=[\n        Middleware(\n            MatomoMiddleware,\n            matomo_url=\"YOUR MATOMO TRACKING URL\",\n            idsite=12345,  # your service tracking id\n            route_details={\n                \"/foo\": {\"action_name\": \"Foo/foo\", \"e_c\": \"Foo\", \"e_a\": \"Playing\"}\n            },\n        )\n    ],\n)\n</code></pre> <p>In this example, we are changing the details about the route <code>/foo</code> in the following ways:</p> <ol> <li>We override the <code>action_name</code> with <code>Foo/foo</code>.</li> <li>We add an event category <code>e_c</code> and an event <code>e_a</code> to this roure.</li> </ol>"},{"location":"usage/details/#configuring-a-request","title":"Configuring a request","text":"<p>We can also configure what is tracked during a request by adding a dictionary with values as <code>asgi_matomo</code> in the request state.</p> <pre><code>from asgi_matomo import MatomoMiddleware\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\n\n\nasync def foo(request: Request):\n    if \"state\" not in request.scope:\n        request.scope[\"state\"] = {}\n    request.scope[\"state\"][\"asgi_matomo\"] = {\n        \"action_name\": \"Foo/foo\",\n        \"e_c\": \"Foo\",\n        \"e_a\": \"Playing\",\n        \"cvar\": {\"anything\": \"goes\"},\n    }\n    return JSONResponse({\"name\": \"foo\"})\n\n\napp = Starlette(\n    routes=[Route(\"/foo\", foo)],\n    middleware=[\n        Middleware(\n            MatomoMiddleware,\n            matomo_url=\"YOUR MATOMO TRACKING URL\",\n            idsite=12345,  # your service tracking id\n        )\n    ],\n)\n</code></pre> <p>Here, in this example, we</p> <ol> <li>override the <code>action_name</code></li> <li>add an event category <code>e_c</code> and an event <code>e_a</code></li> <li>We also add <code>cvar</code>, where custom variables can be tracked.</li> </ol> <p>Note</p> <p>Notice that <code>cvar</code> can only be set during a request.</p>"},{"location":"usage/details/#tracking-time-for-different-steps-of-a-request","title":"Tracking time for different steps of a request","text":"<p>To help you track time spent on different tasks, you can use <code>PerfMsTracker</code>.</p> <pre><code>import asyncio\n\nfrom asgi_matomo import MatomoMiddleware\nfrom asgi_matomo.trackers import PerfMsTracker\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\n\n\nasync def fetch_data():\n    await asyncio.sleep(0.2)\n    return {\"data\": 4000}\n\n\nasync def homepage(request):\n    with PerfMsTracker(scope=request.scope, key=\"pf_srv\"):\n        # fetch/compute data\n        data = await fetch_data()\n    return JSONResponse(data)\n\n\napp = Starlette(\n    routes=[Route(\"/\", homepage)],\n    middleware=[\n        Middleware(\n            MatomoMiddleware,\n            matomo_url=\"YOUR MATOMO TRACKING URL\",\n            idsite=12345,  # your service tracking id\n        )\n    ],\n)\n</code></pre> <p>In this example the function <code>fetch_data</code> simulates fetching some data from somewhere else, and we want to track the time it takes to fetch the data in the variable <code>pf_srv</code>.</p> <p>So we use <code>PerfMsTracker</code> as a context manager and the time is recorded between entering and exiting the context. The elapsed time (in milliseconds) is then stored in the request state under <code>asgi_matomo</code> with the given key (here = <code>pf_srv</code>).</p> <p>Note</p> <p><code>PerfMsTracker</code> can also be used as an async context manager if that is needed.</p>"},{"location":"usage/testing/","title":"Testing","text":"<p>You can provide your own client to test what <code>MatomoMiddleware</code> tracks.</p> <pre><code>import contextlib\nimport time\nfrom dataclasses import dataclass\nfrom typing import AsyncGenerator\nfrom unittest import mock\nfrom urllib.parse import parse_qs, urlsplit\n\nimport pytest\nimport pytest_asyncio\nfrom asgi_lifespan import LifespanManager\nfrom asgi_matomo import MatomoMiddleware\nfrom asgi_matomo.trackers import PerfMsTracker\nfrom httpx import AsyncClient\nfrom starlette.applications import Starlette\nfrom starlette.exceptions import HTTPException\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse, PlainTextResponse\nfrom starlette.testclient import TestClient\n\n\n@dataclass\nclass MockResponse:\n    status_code: int\n    text: str = \"response\"\n\n\ndef create_matomo_client():\n    matomo_client = mock.AsyncMock(AsyncClient)\n    matomo_client.get = mock.AsyncMock(return_value=MockResponse(status_code=204))\n    return matomo_client\n\n\ndef create_app(matomo_client) -&gt; Starlette:\n    app = Starlette()\n\n    app.add_middleware(\n        MatomoMiddleware,\n        client=matomo_client,\n        matomo_url=\"http://trackingserver\",\n        idsite=12345,\n    )\n\n    async def foo(request):\n        return PlainTextResponse(\"foo\")\n\n    app.add_route(\"/foo\", foo)\n    return app\n\n\nmatomo_client = create_matomo_client()\napp = create_app(matomo_client)\n\n\ndef test_app():\n    client = TestClient(app)\n    response = client.get(\"/foo\")\n    assert response.status_code == 200\n\n    matomo_client.get.assert_awaited()\n</code></pre>"}]}