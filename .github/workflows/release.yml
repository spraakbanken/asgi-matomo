name: Release

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request: {}

env:
  POETRY_VERSION: "1.3.1"
  MINIMUM_PYTHON_VERSION: "3.10"

jobs:
  lint:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.task.name }} (${{ matrix.os }})
    strategy:
      max-parallel: 4
      fail-fast: true
      matrix:
        # Only run checks on ubuntu for MINIMUM_PYTHON_VERSION
        os: [ubuntu-latest]
        task:
          - name: Type check
            run: make type-check
          - name: Lint code
            run: make lint
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ env.MINIMUM_PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

       #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: make install-ci

      #----------------------------------------------
      # Run matrix task
      #----------------------------------------------
      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}

  tests:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.task.name }} py-${{ matrix.python-version }} (${{ matrix.os }})
    strategy:
      max-parallel: 4
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11"]
        task:
          - name: Run tests
            run: make all-tests

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

       #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: make install-ci

      #----------------------------------------------
      # Run matrix task
      #----------------------------------------------
      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}

   # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  check:
    if: always()
    needs: [lint, tests]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
          allowed-failures: coverage

  build:
    name: Build package
     # only run on push to main and on release
    if: "success() && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')"
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ env.MINIMUM_PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      #----------------------------------------------
      #  -----  build distribution -----
      #----------------------------------------------
      - name: Build distribution
        run: poetry build

      #----------------------------------------------
      #  -----  upload artifacts  -----
      #----------------------------------------------
      - uses: actions/upload-artifact@v3
        with:
          name: pypi_files
          path: dist

  test-build:
    name: test build on ${{ matrix.os }}
    needs: [build]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - run: rm -r asgi_matomo
      - run: pip install typing-extensions
      - run: pip install -r tests/requirements.txt
      - run: pip install asgi-matomo --no-index --find-links dist --force-reinstall
      - run: pytest

  publish:
    needs: [check, test-build]
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    environment: release
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.MINIMUM_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

