name: CI

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request: {}

env:
  POETRY_VERSION: "1.3.1"
  MINIMUM_PYTHON_VERSION: "3.10"

jobs:
  lint:
    name: ${{ matrix.task.name }} (${{ matrix.os }})
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        # Only run checks for ubuntu
        os: [ubuntu]
        task:
          - name: Type check
            run: make type-check
          - name: Check formatting
            run: make check-fmt
          - name: Lint code
            run: make lint

    runs-on: ${{ matrix.os }}-latest

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ env.MINIMUM_PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('.github/workflows/ci.yml')}}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
          poetry install --only ci
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      # Run matrix task
      #----------------------------------------------
      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}

  coverage:
    name: Test coverage py-${{ matrix.python-version }} on ${{ matrix.os }}

    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        # only do test-build for macos and windows for now
        os: [ubuntu] # , macos , windows-latest]
        python-version:
          - "3.10"
          - "3.11"
          - "3.12-dev"
    continue-on-error: >-
      ${{ contains(matrix.python-version, 'dev') && true || false }}

    runs-on: ${{ matrix.os }}-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('.github/workflows/ci.yml') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
          poetry install --only ci
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      # Run tests and upload coverage
      #----------------------------------------------
      - name: Run tests for coverage
        run: make cov_report=xml all-tests-w-coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # directory: ./coverage/reports/
          # env_vars: OS,PYTHON
          fail_ci_if_error: true
          # files: ./coverage1.xml,./coverage2.xml
          # flags: unittests
          # name: codecov-umbrella
          verbose: true


   # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  check:
    if: always()
    needs: [lint, coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  build:
    name: Build package
     # only run on push to main and on release
    if: "success() && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')"
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ env.MINIMUM_PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      #----------------------------------------------
      #  -----  build distribution -----
      #----------------------------------------------
      - name: Build distribution
        run: poetry build

      #----------------------------------------------
      #  -----  upload artifacts  -----
      #----------------------------------------------
      - uses: actions/upload-artifact@v3
        with:
          name: pypi_files
          path: dist

  test-build:
    name: test build on ${{ matrix.os }}
    needs: [build]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - run: rm -r asgi_matomo
      - run: pip install typing-extensions
      - run: pip install -r tests/requirements.txt
      - run: pip install asgi-matomo --no-index --no-deps --find-links dist --force-reinstall
      - run: pytest tests/test_asgi_matomo.py

  publish:
    needs: [check, test-build]
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    environment: release
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.MINIMUM_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-docs:
    needs: [publish]
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    environment: release
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: olegtarasov/get-tag@v2.1.2
        id: tag_name
        with:
          tagRegex: "v(\\d+\\.\\d+).*"  # Optional. Returns specified group text as tag name. Full tag string is returned if regex is not defined.
          tagRegexGroup: 1 # Optional. Default is 1.
      - name: Set up Python ${{ env.MINIMUM_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install docs requirements
        run: poetry install --only docs
      - name: Configure Git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      - name: Build docs
        run: |
          cd docs/en
          poetry run mike deploy -u ${{ steps.tag_name.outputs.tag }} latest
          poetry run mike set-default ${{ steps.tag_name.outputs.tag }}
      - name: Publish
        run: git push origin gh-pages
      # - name: get dist artifacts
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: pypi_files
      #     path: dist

      # - name: Publish package to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
  publish-dev-docs:
    needs: [check, test-build]
    if: "success() && github.ref == 'refs/heads/main'"
    runs-on: ubuntu-latest
    environment: release
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.MINIMUM_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install docs requirements
        run: poetry install --only docs
      - name: Configure Git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      - name: Build docs
        run: |
          cd docs/en
          poetry run mike deploy -u dev

      - name: Publish
        run: git push origin gh-pages

