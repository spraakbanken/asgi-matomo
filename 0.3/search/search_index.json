{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to asgi-matomo \u00b6 asgi-matomo is a library for tracking requests to your ASGI -app with Matomo . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. ()","title":"asgi-matomo"},{"location":"#welcome-to-asgi-matomo","text":"asgi-matomo is a library for tracking requests to your ASGI -app with Matomo .","title":"Welcome to asgi-matomo"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. ()","title":"Project layout"},{"location":"usage/","text":"Getting started \u00b6 Installation \u00b6 To install asgi-matomo : pip install asgi-matomo Usage \u00b6 To use the MatomoMiddleware with, for instance Starlette , simply: This will track all requests made to your service. What is tracked? \u00b6 Currently asgi-matomo tracks the following variables: action_name that defaults to the path url of the request ua : user-agent of the client gt_ms : measured as the time before and after this middleware call next in the asgi stack. cvar with at least http_status_code and http_method set. lang : if the header accept-lang is set cip : client ip, this is only tracked if access_token is given sendimage=0 for performance issues Please refer to Matomo Tracking HTTP API for available variables.","title":"Getting started"},{"location":"usage/#getting-started","text":"","title":"Getting started"},{"location":"usage/#installation","text":"To install asgi-matomo : pip install asgi-matomo","title":"Installation"},{"location":"usage/#usage","text":"To use the MatomoMiddleware with, for instance Starlette , simply: This will track all requests made to your service.","title":"Usage"},{"location":"usage/#what-is-tracked","text":"Currently asgi-matomo tracks the following variables: action_name that defaults to the path url of the request ua : user-agent of the client gt_ms : measured as the time before and after this middleware call next in the asgi stack. cvar with at least http_status_code and http_method set. lang : if the header accept-lang is set cip : client ip, this is only tracked if access_token is given sendimage=0 for performance issues Please refer to Matomo Tracking HTTP API for available variables.","title":"What is tracked?"},{"location":"usage/details/","text":"Configuring tracked details \u00b6 Sometimes we want to change something that is tracked, it can either be about a route or about a specific request. Configuring a route \u00b6 We can configure a route by giving the middleware a dict with details. In this example, we are changing the details about the route /foo in the following ways: We override the action_name with Foo/foo . We add an event category e_c and an event e_a to this roure. Configuring a request \u00b6 We can also configure what is tracked during a request by adding a dictionary with values as asgi_matomo in the request state. Here, in this example, we override the action_name add an event category e_c and an event e_a We also add cvar , where custom variables can be tracked. Note Notice that cvar can only be set during a request. Tracking time for different steps of a request \u00b6 To help you track time spent on different tasks, you can use PerfMsTracker . In this example the function fetch_data simulates fetching some data from somewhere else, and we want to track the time it takes to fetch the data in the variable pf_srv . So we use PerfMsTracker as a context manager and the time is recorded between entering and exiting the context. The elapsed time (in milliseconds) is then stored in the request state under asgi_matomo with the given key (here = pf_srv ). Note PerfMsTracker can also be used as an async context manager if that is needed.","title":"Configuring tracked details"},{"location":"usage/details/#configuring-tracked-details","text":"Sometimes we want to change something that is tracked, it can either be about a route or about a specific request.","title":"Configuring tracked details"},{"location":"usage/details/#configuring-a-route","text":"We can configure a route by giving the middleware a dict with details. In this example, we are changing the details about the route /foo in the following ways: We override the action_name with Foo/foo . We add an event category e_c and an event e_a to this roure.","title":"Configuring a route"},{"location":"usage/details/#configuring-a-request","text":"We can also configure what is tracked during a request by adding a dictionary with values as asgi_matomo in the request state. Here, in this example, we override the action_name add an event category e_c and an event e_a We also add cvar , where custom variables can be tracked. Note Notice that cvar can only be set during a request.","title":"Configuring a request"},{"location":"usage/details/#tracking-time-for-different-steps-of-a-request","text":"To help you track time spent on different tasks, you can use PerfMsTracker . In this example the function fetch_data simulates fetching some data from somewhere else, and we want to track the time it takes to fetch the data in the variable pf_srv . So we use PerfMsTracker as a context manager and the time is recorded between entering and exiting the context. The elapsed time (in milliseconds) is then stored in the request state under asgi_matomo with the given key (here = pf_srv ). Note PerfMsTracker can also be used as an async context manager if that is needed.","title":"Tracking time for different steps of a request"},{"location":"usage/testing/","text":"","title":"Testing"}]}